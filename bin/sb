#!/usr/bin/perl
# sb
#    The MySQL Sandbox
#    Copyright (C) 2009 Giuseppe Maxia
#    Contacts: http://datacharmer.org
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; version 2 of the License
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

use strict;
use warnings;
use MySQL::Sandbox qw(runs_as_root);

my $DEBUG = $MySQL::Sandbox::DEBUG;

runs_as_root();

my $msb = MySQL::Sandbox->new();

my $version = shift
    or get_help();

$ENV{SANDBOX_HOME} = $ENV{SANDBOX_HOME} || "$ENV{HOME}/sandboxes";
unless ( -d $ENV{SANDBOX_HOME} ) {
    die "\$SANDBOX_HOME not found at $ENV{SANDBOX_HOME}\n";
}

$version =~ s/\s*//g;

if ($version =~ /^r(\d+)$/i) { # replication
    open_replication($1);
}
elsif ($version =~ /^m(\d+)$/i) { # multiple
    open_multi($1);
}
elsif ($version =~ /^\d+$/) { #
    open_single($version);
}
elsif (-d "$ENV{SANDBOX_HOME}/$version") {
    open_single($version, "nosearch");
}

sub find_sb {
    my ($prefix, $version) = @_;
    my @dirs = glob ("$ENV{SANDBOX_HOME}/$prefix*");
    $prefix =~ s/_//g;
    for my $dir (@dirs) {
        my $simple_dir = $dir;
        $simple_dir =~ s{.*/}{};
        $simple_dir =~ s/_//g;
        if ("$prefix$version" eq $simple_dir) {
            return $dir;
        }
    }
    return;
}

sub open_single {
    my ($version, $nosearch) = @_;
    my $sb_dir = find_sb('msb', $version);
    if ($nosearch) {
        $sb_dir= "$ENV{SANDBOX_HOME}/$version";
    }
    else {
        $sb_dir = find_sb('msb', $version);
    }
    if ($sb_dir) {
        my ($pid) = glob("$sb_dir/data/*.pid");
        unless ($pid) {
            system "$sb_dir/start";
        }
        exec "$sb_dir/use", @ARGV;
    }
    else {
        die "can't find a matching sandbox for $version\n";
    }    
}

sub open_replication {
    my ($version) = @_;
    my $sb_dir = find_sb('rsandbox', $version);
    # print "replication ($sb_dir)\n";
    if ($sb_dir) {
        my ($pid) = glob("$sb_dir/master/data/*.pid");
        unless ($pid) {
           system  "$sb_dir/start_all";
        }
        my $item = 'm';
        if ($ARGV[0] =~ /^\d+$/ ) {
            my $node = shift @ARGV;
            $item = "s$node";
        }
        exec "$sb_dir/$item", @ARGV;
    }
    else {
        die "can't find a matching sandbox for $version\n";
    }    
}

sub open_multi {
    my ($version) = @_;
    my $sb_dir = find_sb('multi_msb', $version);
    if ($sb_dir) {
        my ($pid) = glob("$sb_dir/node1/data/*.pid");
        unless ($pid) {
            system "$sb_dir/start_all";
        }
        my $node = 1;
        if ($ARGV[0] =~ /^\d+$/ ) {
            $node = shift @ARGV;
        }
        exec "$sb_dir/n$node", @ARGV;
    }
    else {
        die "can't find a matching sandbox for $version\n";
    }    
}

sub get_help {
    my ($msg) = @_;
    if ($msg) {
        print "**** $msg\n";
    } 
    print $msb->credits(); 
    print "MySQL Sandbox shortcut\n",
          "Invokes a single or group sandbox easily.\n",
          "(It will start the sandbox if it is not active).\n",
          "\n",
          "Usage: sb [r|m]version [node] [options]\n",
          "\n",
          "\tr -> replication\n",
          "\tm -> multiple\n",
          "\t[node] is used for r|m\n",
          "\t[options] are what you would pass to the sandbox app\n";
    exit 1;
}
